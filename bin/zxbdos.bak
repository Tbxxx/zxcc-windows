#include "zxcc.h"


#define BDOS_DEF
#include "zxbdos.h"
#include "zxcbdos.h"
#include "zxdbdos.h"

#ifdef __MSDOS__
#include <conio.h>
#endif

/* These are global so  proc_cnc() can know how many chars in buffer */
int cmax;
int countx = 0;
int done = 0;

/* COM/other programs exception list */
char comexcpt[15][15]; /* this stores filenames from FCB */
int num_ex = 0;

extern char key;

/* below are from cpmio library - needed to independently allow
 * getting/setting/using delimiter, print fixed-length string to the
 * console, etc.
 */
static char delimiter = '$';
unsigned int len;
char *buf;

#define BCD(x) (((x % 10)+16*(x/10)) & 0xFF)

/* Convert time_t to CP/M day count/hours/minutes */
dword cpmtime(time_t t)
{
        long d  = (t / 86400) - 2921;  /* CP/M day 0 is unix day 2921 */
        long h  = (t % 86400) / 3600;  /* Hour, 0-23 */
        long m  = (t % 3600)  / 60;    /* Minute, 0-59 */

        return (d | (BCD(h) << 16) | (BCD(m) << 24));
}


byte get_time(cpm_word b)
{
	time_t t;

	time(&t);
	wr32(b, cpmtime(t));
	
	return (BCD(t % 60));
}


/* Functions to access 24-bit & 32-bit words in memory. These are always
  little-endian. */

void wr24(word addr, dword v)
{
	RAM[addr    ] =  v        & 0xFF;
	RAM[addr + 1] = (v >> 8)  & 0xFF;
	RAM[addr + 2] = (v >> 16) & 0xFF;
}

void wr32(word addr, dword v)
{
        RAM[addr    ] =  v        & 0xFF;
        RAM[addr + 1] = (v >> 8)  & 0xFF;
        RAM[addr + 2] = (v >> 16) & 0xFF;
	RAM[addr + 3] = (v >> 24) & 0xFF;
}

dword rd24(word addr)
{
	register dword rv = RAM[addr + 2];
	
	rv = (rv << 8) | RAM[addr + 1];
	rv = (rv << 8) | RAM[addr];
	return rv;
}


dword rd32(word addr)
{
        register dword rv = RAM[addr + 3];

	rv = (rv << 8) | RAM[addr + 2];
        rv = (rv << 8) | RAM[addr + 1];
        rv = (rv << 8) | RAM[addr];
        return rv;
}

#define peekw(addr) ( (((word)(RAM[addr + 1])) << 8) | RAM[addr])


/* Get / set the program return code. We store this in 'C' form: 0 for
   success, 1-255 for failure. Translate to/from the CP/M form of:

   0x0000-0xFEFF for success
   0xFF00-0xFFFE for failure 

   We also store the actual value so it can be returned

  */

word cpm_errcde(word DE)	
{
	static word real_err = 0;

	if (DE == 0xFFFF) return real_err;
	real_err = DE;

	if      (DE == 0xFF00) cpm_error = 1;
	else if (DE  > 0xFF00) cpm_error = (DE & 0xFF);	
	else		       cpm_error = 0;
	return 0;
}


#undef bc
#undef de
#undef hl

void setw(Z80 *R, word w)
{
	R->HL.B.l = (w >> 8) & 0xff;
	R->HL.B.l = (w & 0xff);
}

void cpmbdos(Z80 *R)
{
	word de    = R->DE.W;
	word hl    = R->HL.W;
	byte c	=	 R->BC.B.l;
	byte *pde  = &RAM[R->DE.W];
	byte *pdma = &RAM[cpm_dma];
	word temp;
	int retv;
	int retval;
	int rc;
	int cod;
	char buffer[129];	
	char a;
	int idx = 0;

/* disk calls only
if (R->BC.B.l >= 0xc) {
	printf("cpmbdos: BDOS with C=%02x DE=%04x\n", R->BC.B.l, R->DE.W);
}
*/

	switch(R->BC.B.l) {
        case 0:
            /* normal exit to host OS */
            goodbye(99);
        break;

        case 1:     /* Get a character */
            a = x_conin(); /* call BIOS - sets A register */
			/* set A register */
			R->AF.B.h = a;
#ifdef DEBUG
Msg("BDOS raw char in = %d\n", *a);
#endif

            /* test for control char */
            if (a < ' ') {  /* char less than ASCII blank */
                switch(a) {    /* test */
                	case '\r':
                	case '\n':
                    	/* end of line processing */
                    	/* xlate to linefeed, except for CYGW
                   	 	* that needs CR.  Maybe...  Cygwin
                    	* wants LF everywhere else.
                    	* Need to test LF return for
                    	* everything else.  They usually want
                    	* CR.
                    	*/
                    	a = 10;
                    	x_conot(13); /* echo CR/LF */
                    	x_conot(10);
                    	break;
                	case '\t':
                    	x_conot(a);    /* echo */
                    	break;
                	default:
                    	/* out caret to show control char */
                    	x_conot('^');
                    	/* send to screen */
                    	x_conot((a & 0xff)+'@');
                    	if (a == 3) {
                        	/* ctrl-C pressed */
                        	/* do warm boot
                         	* if proc_cnc() doesn't
                         	* prevent it i.e. mbasic/
                         	* obasic.
                         	*/
                     	   /* BDOS exits program on 03 */
                        	R->BC.B.h = 1; /* bios func 1 */
                        	cpmbios(R);
                        	return;
                		}
                	} /* end switch */
                }
                /* make upper case */
                if (islower(a)) {
                    toupper(a);
                }
                /* copy to L register as per DRI BDOS spec */
				R->HL.B.l = a;
                /* echo character */
                x_conot(a);
            break;
        case 2:     /* Print a character */
			x_conot(R->DE.B.l);
			 break;
		case 3: /* no auxin for now - probably file eventually */
			setw(R,0x1a);
			break;
		case 4:	/* no auxout for now - probably file eventually */
			break;
		case 5: /* printer to file, but not yet */
			break;
		case 6:     /* Direct console I/O */
            switch(R->DE.B.l) {
                case(0xFF):
                    /* sample console status */
					R->AF.B.h = x_const();
                    break;
                default:
                    /* send char in E reg to conot */
                    x_conot(R->DE.B.l);
                    break;
            }
        	break;
        case 7:     /* No auxist */
        case 8:     /* No auxost */
        	break;
        case 9:     /* Print a delimiter-terminated string */
        	for (cod = 0; RAM[R->DE.W + cod] != delimiter; ++cod) {
                x_conot(RAM[R->DE.W + cod]);
        	}
        	break;
        case 0x0A: /* read command line */
        	/* zero buffer before use - left over data screws things up */
        	memset(buffer, 0, cmax);
            cmax = RAM[de];
        	fgets(buffer, cmax, stdin);
        	buffer[strlen(buffer)-1] = '\0'; /* zap newline */
        	strupper(buffer);
            memcpy(&RAM[R->DE.W+2], buffer, strlen(buffer)); /* no nl */
            RAM[R->DE.W+1] = strlen(buffer);
#ifdef DEBUG
Msg("function 0a buffer = [%s]\n", buffer);
Msg("function 0a returning [%s]\n", &RAM[de+2]);
#endif
        	break;
		case 0x0B:	/* Console status */
        	/* This doesn't work as written (always returns no keys
        	 * pressed). So, use routine from bios and add reg L return.
        	 * ++tlb
        	 */
        	a = x_const();
        	/* Status in both A and L registers */
			R->AF.B.h = a;
			R->HL.B.l = a;
        	break;
		case 0x0C:	/* Get CP/M version */

			/* For GENCOM's (note - Werner Cirsovius' also!) benefit,
			 * claim to be v3.1
			 */
			R->HL.W = 0x0031; 	/* v3.1 */
			/* H = 0 means CP/M, no network */
			break;

		case 0x0D:	/* Re-log discs */
		fcb_reset(); 	
		break;	
	
		case 0x0E:	/* Set default drive */
/* SLR trap - tracer shows 0xFF in E register - blows up program -
 * Do not allow anything except drive A: or current - e.g. 0 or 1
 * No other drive can be written to anyway - the BDOS open PATH
 * is for reading files only.  Writes are only allowed to the current
 * directory/drive or A: explicitly.
 *
 * slr180 works fine with this hack.
 * Modified to only correct if over 16 - changed in cpmredir also
 *
 */
/*
printf("select drive: %02x\n", R->DE.B.l);
*/
		if (R->DE.B.l > 16) {  /* SLR bullshit protection
							 	* It runs anyway with a bit of persuasion!
							 	*/
			setw(R,fcb_drive(0));	/* current drive - always succeeds */
		} else {
			setw(R,fcb_drive(R->DE.B.l));	/* real drive requested */
		}
		break;

		case 0x0F:	/* Open using FCB */
/*
printf("BDOS 0x0F (F_OPEN) called - fcb data:\n");
fcb_dump(pde);
*/
		rc = x_fcb_open(pde,pdma);
		setw(R,rc);
		if (rc == 0xff) {
			printf("F_OPEN: fail!\n");
			fcb_dump(pde);
		}
/*
		setw(R, x_fcb_open(pde, pdma));
*/
		break;

		case 0x10:	/* Close using FCB */
		setw(R, rc = (fcb_close(pde)));
/*
printf("fclose: rc = %d\n", rc);
*/
		break;

		case 0x11:	/* Find first */
		setw(R, fcb_find1(pde, pdma));
		break;

		case 0x12:
		setw(R, fcb_find2(pde, pdma));
		break;

		case 0x13:	/* Delete using FCB */
		setw(R, fcb_unlink(pde, pdma));
		break;

		case 0x14:      /* Sequential read using FCB */
		setw(R, fcb_read(pde, pdma));
		break;

		case 0x15:      /* Sequential write using FCB */
printf("BDOS 0x15 (F_WRITE SEQ) called - fcb data:\n");
fcb_dump(pde);
#if 0
		done = 0;
		if ((strncmp(pde+9, "COM", 3) == 0) ||
			(strncmp(pde+9, ".O  ", 3) == 0) ||
			(strncmp(pde+9, ".OBJ", 3) == 0) ||
			(strncmp(pde+9, ".MIX", 3) == 0)) {
/*
printf("output filetype found!\n");
*/
			 /* It's a COM or output file, does it need to be created?
			  *  if so, create it/store it
		  	  */
			/* does the file exist already? */
			rc = x_fcb_stat(pde);
if (rc == 0) {
	printf("write_seq: file exists already.\n");
}

			if (rc = 0xFF) {	/* doesn't exist, does it need to be? */
				/* has it already been processed? - NOTE, any call to
				 * F_MAKE will be put in this list also to avoid being
				 * interferred with.
				 */
				for (idx = 0; idx != num_ex; idx++) {
					if (strncmp(pde+1, comexcpt[idx], 11) == 0) {
						/* yes, it's here, so ignore and allow write */
						setw(R, fcb_write(pde, pdma));
						done = 1;	/* set flag for already complete */
						break;
					}
				}
				if (done == 0) {	/* file not found in exception list */
					/* create it! */
printf("F_MAKE: Adding before sequential write!\n");
fcb_dump(pde);
					retval = fcb_creat(pde, pdma);
					if (retval == 0xff) {
						setw(R, retval);
						done = 1;
					} else {
						/* save file name for next time */
						strncpy(comexcpt[num_ex], pde+1, 11);
						num_ex++;
						/* allow write */
						setw(R, fcb_write(pde, pdma));
						done = 1;	/* set flag for already complete */
					}
				}

			} else { /* it exists - so allow write */
				setw(R, fcb_write(pde, pdma));
			}
		} else {
			/* just write it - not a COM or watched file */
			setw(R, fcb_write(pde, pdma));
		}
++tlb
		/* does the file already exist? */
		rc = fcb_stat(pde);
		if (rc == 0xff) {	/* NO, so create it */
			rc = fcb_creat(pde, pdma);
			if (rc == 0xff) {
				/* return fail */
				setw(R, rc);
			} else {
				/* do write */
				setw(R, fcb_write(pde, pdma));
			}
		} else {	/* yes, so do write */
			setw(R, fcb_write(pde, pdma));
		}
#endif		
		setw(R, fcb_write(pde, pdma));
		break;

		case 0x16:	/* Create using FCB */
		/* only allow Create to work on current drive
		 * no matter what's in the FCB request.
		 */
		*pde = 0;	/* set current drive to 0 */
printf("BDOS 0x16 (F_MAKE) - fcb data:\n");
fcb_dump(pde);
		/* save filename - so it won't be interferred with later
		 * for output files where F_OPEN is called without an
		 * F_MAKE first.
		 */
		strncpy(comexcpt[num_ex], pde+1, 11); /* save it */
		num_ex++; /* bump counter */

		setw(R,fcb_creat(pde, pdma));
		break;

		case 0x17:	/* Rename using FCB */
		setw(R, fcb_rename(pde, pdma));
		break;

		case 0x18:	/* Get login vector */
		setw(R, fcb_logvec());
		break;

		case 0x19:	/* Get default drive */
		setw(R, cpm_drive);
		break;

		case 0x1A:	/* Set DMA */
		Msg("Set DMA to %04x\n", de);
		cpm_dma = de;
		break;

		case 0x1B:	/* Get alloc vector */
		fcb_getalv(RAM + 0xFF80, 0x40);
		setw(R, 0xFF80);
		break;

		case 0x1C:	/* Make disc R/O */
		setw(R, fcb_rodisk());	
		break;

		case 0x1D:	/* Get R/O vector */
		setw(R, fcb_rovec());
		break;

		case 0x1E:	/* Set attributes */
		setw(R, fcb_chmod(pde, pdma));
		break;

		case 0x1F:	/* Get DPB */
		fcb_getdpb(RAM + 0xFFC0);
		setw(R, 0xFFC0);
		break;		/* Whoops. Missed that 'break'. */

		case 0x20:	/* Get/set uid */
		setw(R, fcb_user(R->DE.B.l));
		break;

		case 0x21:      /* Read a record */
		setw(R, fcb_randrd(pde, pdma));
/*
printf("BDOS 0x22 (READ RND) called - fcb data:\n");
fcb_dump(pde);
printf("read rec dump:\n");
dma_dump(pdma);
*/
		break;

		case 0x22:      /* Write a record */
/*
printf("BDOS 0x22 (WRITE RND) called - fcb data:\n");
fcb_dump(pde);
printf("rand write rec dump:\n");
dma_dump(pdma);
*/
		setw(R, fcb_randwr(pde, pdma));
		break;

		case 0x23:	/* Get file size */
		setw(R, x_fcb_stat(pde));
		break;

		case 0x24:	/* Get file pointer */
		setw(R, fcb_tell(pde));
		break;

		case 0x25:
		setw(R, fcb_resro(R->DE.W));
		break;

		/* MP/M drive access functions, not implemented */

		case 0x28:	/* Write with 0 fill */
		setw(R, fcb_randwz(pde, pdma));
		break;

		/* MP/M record locking functions, not implemented */

		case 0x2C:	/* Set no. of records to read/write */
		setw(R, fcb_multirec(R->DE.B.l));
		break;

		case 0x2D:	/* Set error mode */
		err_mode = R->DE.B.l;
		break;

		case 0x2E:
		setw(R, fcb_dfree(R->DE.B.l, pdma));
		break;		/* Whoops. Missed that 'break'. */

		/* 0x2F: Chain */

		case 0x30:
		setw(R, fcb_sync(R->DE.B.l));
		break;	

		case 0x31:
		if (pde[1] == 0xFE) 
		{
			RAM[0xFE9C + *pde] = pde[2];
			RAM[0xFE9D + *pde] = pde[3];
		}
		else if (RAM[hl + 1] == 0xFF)
		{
			RAM[0xFE9C + *pde] = pde[2];
		}
		else 
		{
			R->HL.B.l = RAM[0xFE9C + *pde];
			R->HL.B.h = RAM[0xFE9D + *pde];
		}
		break;

		case 0x32:
		temp = R->IX.W;
		R->IX.W = 3 * (pde[0] + 1);
		R->AF.B.h = pde[1];
		R->BC.B.l = pde[2];
		R->BC.B.h = pde[3];
		R->DE.B.l = pde[4];
		R->DE.B.h = pde[5];
		R->HL.B.h = pde[6];
		R->HL.B.h = pde[7];
		cpmbios(R);
		R->IX.W = temp;
		break;

		case 0x3C:	/* Communicate with RSX */
		R->HL.W = 0;
		break;

		case 0x62:	/* Purge */
		setw(R, fcb_purge());
		break;

		case 0x63:	/* Truncate file */
		setw(R, fcb_trunc(pde, pdma));
		break;

		case 0x64:	/* Set label */
		setw(R, fcb_setlbl(pde, pdma));
		break;

		case 0x65:	/* Get label byte */
		setw(R, fcb_getlbl(R->DE.B.l));
		break;

		case 0x66:      /* Get file date */
		setw(R, fcb_date(pde));
		break;

		case 0x67:	/* Set password */
		setw(R, fcb_setpwd(pde, pdma));
		break;

		case 0x68:	/* Set time of day */
		/* Not advisable to let an emulator play with the clock */
		break;

		case 0x69:	/* Get time of day */
		setw(R, get_time(R->DE.W));
		break;	

		case 0x6A:	/* Set default password */
		setw(R, fcb_defpwd(pde));
		break;

		case 0x6B:	/* Get serial number */
		memcpy(pde, SERIAL, 6);
		break;

		case 0x6C:	/* 0.03 set error code */
		setw(R, cpm_errcde(R->DE.W));
		break;

		case 0x6D:	/* Set/get console mode */
/* difficult without cpmio library - come back to it
		setw(R, cpm_bdos_109(R->DE.W));
*/
		break;

		case 0x6E:	/* Set/get string delimiter */
		/* note - below is stolen from cpmio library! - revert back to
		 * original code if cpmio is used!
		 */
/*
		setw(R, cpm_bdos_110(*e));
*/
    	if (de != 0xFFFF) delimiter = (R->DE.W & 0xFF);
		setw(R,R->DE.B.l);
		break;

		case 0x6F:	/* Send fixed length string to screen */
		/* note - below is stolen from cpmio library! - revert back to
		 * original code if cpmio is used!
/*
		if (cpm_bdos_111((char *)RAM + peekw(R->DE.W), 
                                 peekw(R->DE.W + 2)))
*/
		buf = (char *)RAM + peekw(R->DE.W);
		len = peekw(R->DE.W + 2);
    	while(len) {
			x_conot(*buf++);
			len--;
		}
		setw(R,0);
		break;

		case 0x70:	/* Send fixed length string to printer */
		break;

		/* 0x71: Strange PCP/M function */
#if 0
		case 0x6D:	/* Set/get console mode */
		setw(R, 0);
		break;
#endif

		case 0x74:	/* Set date stamp */
		setw(R, fcb_sdate(pde, pdma));
		break;

		case 0x98:	/* Parse filename */
		setw(R, fcb_parse((char *)RAM + peekw(de),
                                    (byte *)RAM + peekw(de + 2)));
		break;

		case 240:	/* not real - used by exit.com as graceful exit from
					 * Microshell, for example
					 */
			/* clean up and exit */
			goodbye(99);
			break;
		
		default:

			fprintf(stderr,"%s: Unsupported BDOS call %d\n", progname, 
				(int)(R->BC.B.l));	
			dump_regs(R);
			zxcc_exit(1);
			break;	
	}
	
	R->AF.B.h = R->HL.B.l;
	R->BC.B.h = R->HL.B.h;
}

void cpmbios(Z80 *R)
{
	int retv;
	char a;
	int func = (((R->IX.W) & 0xFF)  / 3) - 1;
/*
	int func = R->BC.B.h;
*/
/*
printf("BIOS function called = %d\n", func);
*/


	switch(func)	/* BIOS function */
	{
		/* exit with cold start request */
		case 0:
			/* clean up and exit */
			goodbye(99);
		break;

		/* exit with warm start request */
		case 1:
			/* clean up and exit */
			goodbye(99);
		break;

		case 2:		/* CONST */
			a = x_const() ? 0xFF : 0x00;
			R->AF.B.h = a;

			/* return must be in A reg */
		break;

		case 3: 	/* CONIN */
			a = x_conin() & 0xFF;
			if (a == 127) {
				/* ++tlb - needed for mbasic/obasic */
				a = 8;
			}
			/* xlate for mbasic/obasic from lf to cr
			 * if CYGW
			 */
			R->AF.B.h = a;
	
			/* function returns char in A register */
			break;

		case 4:		/* CONOUT */
			/* output char in register C */
			x_conot(R->BC.B.l);

			break;

		case 5:		/* PRINTER OUTPUT */
#if 0
			if ((fplst = fopen("lstout", "a")) == NULL) {
				fprintf(stderr, "Open fail on lstout\n");
				exit(3);
			}
			/* send char to printer file via low-level bios call */
			x_lstot(R->BC.B.l);
			fclose(fplst);
#endif
			break;

		case 20:	/* DEVTBL */
			setw(R, 0xFFFF);
			break;

		case 22:	/* DRVTBL */
			setw(R, 0xFFFF);
			break;

		case 26:	/* TIME */
			RAM[0xFEF8] = get_time(0xFEF4);
			break;	

		case 30:	/* USERF!!! */
			printf("This program has attempted to call USERF, which is not implemented.\n");
			zxcc_exit(1);
			break;

		default:
			fprintf(stderr,"%s: Unsupported BIOS call %d\n", progname, func);
#ifdef DEBUG
		dump_regs(R);
#endif
		zxcc_exit(1);
	}
}

#if 0
void cpmbios(Z80 *R)
{
	int func = (((*ix) & 0xFF)  / 3) - 1;

	switch(func)	/* BIOS function */
	{
		case 1:
		zxcc_exit(zxcc_term());	/* Program termination */
		break;

		case 2:		/* CONST */
#ifdef USE_CPMIO
		*a = cpm_const();
#else 
		*a = cpm_bdos_6(0xFE);
#endif
		break;

		case 3: 	/* CONIN */
#ifdef USE_CPMIO
		*a = cpm_conin();
#else 
		*a = cpm_bdos_6(0xFD);
#endif
		break;

		case 4:		/* CONOUT */
#ifdef USE_CPMIO
		cpm_conout(*c);
#else 
		cpm_bdos_6(*c);
#endif
		break;

		case 20:	/* DEVTBL */
		setw(R, 0xFFFF);
		break;

		case 22:	/* DRVTBL */
		setw(R, 0xFFFF);
		break;

		case 26:	/* TIME */
		RAM[0xFEF8] = get_time(0xFEF4);
		break;	

		case 30:	/* USERF!!! */
		printf("This program has attempted to call USERF, which "
                       "is not implemented.\n");
		goodbye(99);
		zncc_exit(1);
		break;

		default:
			fprintf(stderr,"%s: Unsupported BIOS call %d\n", progname, func);
			dump_regs(R);
            zxcc_exit(1);
	}
}
#endif
cpm_scr_unit()
{
	/* dummy for now */
}
x_conin()
{
        int ret = 0;
        int c;
        if (key) {
                c = key;
                key = '\0';
Msg("x_conin - returning %02x which was in key\n", c);
                return(c);
        }
        else {
                /* hang in loop until char is ready */
                while (!ret) {
                        ret = kbhit();
                }
                c = getch();
Msg("x_cohin - returning %02x which was read in\n", c);
        return(c);
        }
}

x_conot(int c)
{
/*
Msg("x_conot: output char %02x\n", c);
*/
    /* remove terminal control codes
     * Allow CR, LF, BS, TAB and printable chars only
     */
#if 0
    if (c == '\r' || c == '\n' || c == '\t' ||
        c == '\b' || (c > 31 && c < 127)) {
        /* send char to stdout */
            write(1,&c,1);
    }
#endif
        write(1,&c,1);
}

/* ++tlb - pseudo BIOS functions
 * These three functions are all that should be needed
 * to be modified to run on another OS.  If Linux/Unix,
 * then the termios.h functions must be used.  For
 * Windows, most compilers have these functions
 * (kbhit() etc., built in.
 * Note - key is a global defined in the *.c containing main()
 */
x_const()
{
        int ret;
        ret = kbhit();
        if (ret) {
                key = getch();
                return(0xff);
        } else {
				key = 0x00;
                return(0x00);
        }
}

fcb_dump(char *ptr)
{
	int i, j;

	char *nptr;
	char *nptr2;
	char *optr;

	nptr = ptr;
	nptr2 = ptr;
	optr = ptr;

	/* print header */
	printf("00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n");

	/* 1st 16 bytes, first in hex and then, if printable, in ASCII */
	for (j = 0; j != 16; j++) {
		printf("%02x ", *nptr++ & 0xff);
	}
	printf("    ");
	for (i = 0; i != 16; i++) {
		if (isprint(*nptr2++ & 0xff)) {
			printf("%c", *(nptr2-1));
		} else {
			printf(".");
		}
	}
	printf("\n");
	/* 2nd 16 bytes, first in hex and then, if printable, in ASCII */
	for (j = 0; j != 16; j++) {
		printf("%02x ", *nptr++ & 0xff);
	}
	printf("    ");
	for (i = 0; i != 16; i++) {
		if (isprint(*nptr2++ & 0xff)) {
			printf("%c", *(nptr2-1));
		} else {
			printf(".");
		}
	}
	printf("\n");

	ptr = optr;
	return;
}
#if 0
dma_dump(char *ptr)
{
	int i, j, k;

	char *nptr;
	char *nptr2;
	char *optr;

	nptr = ptr;
	nptr2 = ptr;
	optr = ptr;

	/* print header */
	printf("00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n");

	for(k = 0; k != 8; k++) {  /* 16*8=128 byte dump */
		/* 1st 16 bytes, first in hex and then, if printable, in ASCII */
		for (j = 0; j != 16; j++) {
			printf("%02x ", *nptr++ & 0xff);
		}
		printf("    ");
		for (i = 0; i != 16; i++) {
			if (isprint(*nptr2++ & 0xff)) {
				printf("%c", *(nptr2-1));
			} else {
				printf(".");
			}
		}
		printf("\n");
	}

	ptr = optr;
	return;
}
#endif
